:root {
    --headColor: hsl(130, 75%, 75%);
    --endColor: hsl(60, 75%, 40%);
}
$count: 200;

.bubbleLoading {
    .gContainer, .gContainerWrap {
        position: relative;
        background: #000;
        border-radius: 10px;
        overflow: hidden;
    }

    .gCircle {
        position: relative;
        width: 300px;
        height: 300px;
        border-radius: 50%;
        background: conic-gradient(
            var(--headColor) 0, 
            var(--headColor) 10%,
            hsl(120, 75%, 70%), 
            hsl(110, 75%, 65%), 
            hsl(100, 75%, 60%),
            hsl(90, 75%, 55%), 
            hsl(80, 75%, 50%),
            hsl(70, 75%, 45%),
            var(--endColor) 30%,
            var(--endColor) 35%,
            transparent 35%
        );
        mask: radial-gradient(transparent, transparent 119px, #000 120px, #000 120px, #000 100%);
        
        &::before,
        &::after {
            content: "";
            position: absolute;
            inset: 0;
            width: 30px;
            height: 30px;
            background: var(--headColor);
            top: 0;
            left: 135px;
            border-radius: 50%;
        }
        
        &::after {
            background: var(--endColor);
            left: unset;
            top: 214px;
            right: 26px;
        }
    }

    .gContainer {
        // 上面圆环的代码，保持一致，下面只补充气泡动画的代码
        .gBubbles {
            position: absolute;
            width: 30px;
            height: 30px;
            border-radius: 50px;
            top: 100px;
            left: 235px;
            background: var(--headColor);
        }

        .gBubble {
            position: absolute;
            border-radius: 50%;
            background-color: inherit;
        }

        @for $i from 1 through 100 { 
            .gBubble:nth-child(#{$i}) {
                --rotate: calc(#{random(360)} * 1deg);
                --dis: calc(#{random(100)} * 1px);
                --width: calc(3px + #{random(25)} * 1px);
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                width: var(--width);
                height: var(--width);
                animation: move #{calc((random(1500) + 1500) / 1000)}s ease-in-out -#{calc(random(3000) / 1000)}s infinite;
            }
        }

        @keyframes move {
            0% {
                transform: translate(-50%, -50%) rotate(0deg);
            }
            75% {
                opacity: .9;
            }
            100% {
                transform: rotateZ(var(--rotate)) translate(-50%, var(--dis));
                opacity: .4;
            }
        }
    }

    .gContainer1 {
        width: 300px;
        height: 300px;
        padding: 100px;
        filter: blur(3px) contrast(5);
        animation: rotate 4s infinite linear;

        @keyframes rotate {
            100% {
                transform: rotate(360deg);
                filter: blur(3px) contrast(5) hue-rotate(360deg);
            }
        }
    }

    .gContainer2 {
        position: relative;
        width: 300px;
        height: 300px;
        padding: 100px;
        filter: blur(3px) contrast(3);
        background: #000;
        animation: hueRotate1 8s infinite linear;

        .gCircle {
            position: relative;
            width: 300px;
            height: 300px;
            border-radius: 50%;
            background: conic-gradient(
                var(--headColor) 0, 
                var(--headColor) 2%,
                hsl(120, 75%, 70%), 
                hsl(110, 75%, 65%), 
                hsl(100, 75%, 60%),
                hsl(90, 75%, 55%), 
                hsl(80, 75%, 50%),
                hsl(70, 75%, 45%),
                var(--endColor) 16%,
                var(--endColor) 18%,
                transparent 18%
            );
            mask: radial-gradient(transparent, transparent 119px, #000 120px, #000);
            animation: rotate1 4s infinite -700ms linear;
            
            &::before,
            &::after {
                content: "";
                position: absolute;
                inset: 0;
                width: 32px;
                height: 32px;
                background: var(--headColor);
                top: 0;
                left: 135px;
                border-radius: 50%;
            }
            
            &::after {
                background: var(--endColor);
                left: unset;
                top: 80px;
                right: 10px;
            }
        }
        
        .gBubbles {
            position: absolute;
            width: 30px;
            height: 30px;
            transform: translate(-50%, -50%);
            left: 50%;
            top: 50%;
            border-radius: 50px;
        }
        
        .gBubble {
            position: absolute;
            border-radius: 50%;
            background: var(--endColor);
        }
        
        @for $i from 1 through $count { 
            
            .gBubble:nth-child(#{$i}) {
                --rotate: calc(#{calc(360 / $count)} * #{$i} * 1deg);
                --delayTime: calc(4000 * #{calc($i / $count)} * #{-1ms});
                --width: 30px;
                --scale: #{0.4 + calc(random(10) / 10)};
                --x: #{-100 + random(200)}px;
                --y: #{-100 + random(200)}px;
                width: var(--width);
                height: var(--width);
                transform: 
                    rotateZ(var(--rotate)) 
                    translate(135px, 0);
                opacity: 1;
                animation: showAndHide 4000ms linear var(--delayTime) infinite;
            }
        }
        
        @keyframes showAndHide {
            0% {
                transform: 
                    rotateZ(var(--rotate)) 
                    translate(135px, 0);
                opacity: 0;
            }
            75% {
                opacity: 0;
            }
            75.1% {
                transform: 
                    rotateZ(var(--rotate)) 
                    translate(135px, 0)
                    scale(var(--scale));
                opacity: 1;
            }
            100% {
                transform: 
                    rotateZ(var(--rotate)) 
                    translate(calc(135px + var(--x)), var(--y))
                    scale(.2);
                opacity: 0;
            }
        }
        
        @keyframes rotate1 {
            100% {
                transform: rotate(-360deg);
            }
        }
        
        @keyframes hueRotate1 {
            100% {
                filter: blur(3px) contrast(3) hue-rotate(360deg);
            }
        }
    }
}